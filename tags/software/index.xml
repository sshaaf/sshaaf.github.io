<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>software on Shaaf, Syed's blog</title><link>https://shaaf.dev/tags/software/</link><description>Recent content in software on Shaaf, Syed's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 22 Jun 2009 15:59:07 +0200</lastBuildDate><atom:link href="https://shaaf.dev/tags/software/index.xml" rel="self" type="application/rss+xml"/><item><title>Keep it simple, short and stupid (KISS)</title><link>https://shaaf.dev/post/2009-06-22-keep-it-simple-short-and-stupid/</link><pubDate>Mon, 22 Jun 2009 15:59:07 +0200</pubDate><guid>https://shaaf.dev/post/2009-06-22-keep-it-simple-short-and-stupid/</guid><description>everything should be made as simple as possible, but no simpler - Albert Einstein
I am sitting in a design room today designing a simple requirement for a client. He wants me to enhance the transfer money from one account to another. Just that it happens that I have my best friend Yuky sitting right next to me. He is damn good in Maths and extra ordinarily knows all the calculations on his tips.</description></item><item><title>Automation with Selenium,Junit, Ant</title><link>https://shaaf.dev/post/2009-01-19-automation-with-seleniumjunit-ant/</link><pubDate>Mon, 19 Jan 2009 16:31:52 +0100</pubDate><guid>https://shaaf.dev/post/2009-01-19-automation-with-seleniumjunit-ant/</guid><description>Much of the technologies above do not or will not need an introduction if you already know them or can read them from the links above.
More over today&amp;rsquo;s article is more about how we can use all the three selenium, ant and junit to come up with an automated solution for regressive testing.
Please refer to the documentation links above for the basic knowledge on any of the used tools.</description></item><item><title>Generate XML - DBMS_XMLGEN</title><link>https://shaaf.dev/post/2008-12-10-generate-xml-dbms_xmlgen/</link><pubDate>Wed, 10 Dec 2008 16:58:04 +0100</pubDate><guid>https://shaaf.dev/post/2008-12-10-generate-xml-dbms_xmlgen/</guid><description>On my way to my solution store just found this nice to use, old and easy feature. Possibilities endless, usage typically very easy.
I used the following to generate XML from sqlplus:
select dbms_xmlgen.getxml('select * from user') from dual; Output: &amp;lt; ROWSET &amp;gt; &amp;lt; ROW &amp;gt; &amp;lt; TNAME &amp;gt;Employee&amp;lt; / TNAME &amp;gt; &amp;lt; TABTYPE &amp;gt; TABLE &amp;lt; / TABTYPE &amp;gt; &amp;lt; / ROW &amp;gt; &amp;lt; / ROWSET &amp;gt;</description></item><item><title>Command, Singleton, JMenuItem, JButton, AbstractButton - One Listener for the app</title><link>https://shaaf.dev/post/2008-11-17-command-singleton-jmenuitem-jbutton-abstractbutton-one-listener-for-the-app/</link><pubDate>Mon, 17 Nov 2008 21:17:24 +0100</pubDate><guid>https://shaaf.dev/post/2008-11-17-command-singleton-jmenuitem-jbutton-abstractbutton-one-listener-for-the-app/</guid><description>Here I would like to demonstrate a simple use of JMenuItems being used with Single Listener for the entire system. A simple sample of use would probably be SingleInstance Desktop Application.
Lets see how that is done here.
First lets create a OneListener class that should be able to listen to ActionEvents and also be able to add Commands to itself. Please refer to my previous post on Command,Singleton if you would like to see more about this patterns and there usage.</description></item><item><title>Continous Integration - A blast from the past</title><link>https://shaaf.dev/post/2008-11-12-continous-integration-a-blast-from-the-past/</link><pubDate>Wed, 12 Nov 2008 20:00:16 +0100</pubDate><guid>https://shaaf.dev/post/2008-11-12-continous-integration-a-blast-from-the-past/</guid><description>Although this didn&amp;rsquo;t happen a decade ago but still has been a good case for me to learn and realize how Continuous Integration brings value addition to our work.
As I recall it was like this when they were teenagers :D Few teams working on different modules of same application, deployed together. No build process formalized No builds except for the ones that need major milestone deployments. No feedback, reports, reviews etc.</description></item><item><title>Doing the Locale - Danmark</title><link>https://shaaf.dev/post/2008-11-12-doing-the-locale-danmark/</link><pubDate>Wed, 12 Nov 2008 14:52:08 +0100</pubDate><guid>https://shaaf.dev/post/2008-11-12-doing-the-locale-danmark/</guid><description>The following illustrates how to get the Number format working with a danish locale.
&amp;rsquo;&amp;rsquo;' import java.text.NumberFormat; import java.util.Currency; import java.util.Locale;
public class TestLocale { public static void main(String args[]){ // Create a Locale for Danmark Locale DANMARK = new Locale(&amp;quot;da&amp;quot;,&amp;quot;DK&amp;quot;); // get the currency instance for this locale. Currency krone = Currency.getInstance(DANMARK); // Get a Number format for the locale. NumberFormat krFormat = NumberFormat.getCurrencyInstance(DANMARK); // A symbol for the currency String symbol = krFormat.</description></item><item><title>That thing about CI - Continous Integration</title><link>https://shaaf.dev/post/2008-11-12-that-thing-about-ci-continous-integration/</link><pubDate>Wed, 12 Nov 2008 14:11:18 +0100</pubDate><guid>https://shaaf.dev/post/2008-11-12-that-thing-about-ci-continous-integration/</guid><description>Challenging Business requirements and the need for software development teams to remain agile and competitive while managing parallel development and releases requires a system which is adaptive to these demands.
Our approach to SCM enables unlimited and adaptable process models, which are ideally suited for parallel, distributed, and agile software development. Using state of the Art technologies from various vendors to automate processes such as branching, merging, build, and release keeps you a click away from software delivery.</description></item><item><title>How to read a file from the JAR?</title><link>https://shaaf.dev/post/2008-10-31-how-to-read-a-file-from-the-jar/</link><pubDate>Fri, 31 Oct 2008 20:57:54 +0100</pubDate><guid>https://shaaf.dev/post/2008-10-31-how-to-read-a-file-from-the-jar/</guid><description>Someone just asked me this question today. And I thought might as well put it down for info.
&amp;rsquo;&amp;rsquo;' public TestReadFileFromJar() throws FileNotFoundException, IOException { InputStream is = getClass().getResource(&amp;ldquo;txtData/states.properties&amp;rdquo;); read(is); } &amp;rsquo;''
In the case above txtData is placed in the jar on the root. Remmember to add the path with the &amp;ldquo;/&amp;rdquo;</description></item><item><title>Command</title><link>https://shaaf.dev/post/2008-10-31-command/</link><pubDate>Fri, 31 Oct 2008 20:45:04 +0100</pubDate><guid>https://shaaf.dev/post/2008-10-31-command/</guid><description>By using the command pattern you are seperating the operation from the invoking object. And just because of that it becomes easier to change the command without chagning the caller/s. This means that you could use Command pattern when you might have the following situation
You want to parameterize objects to perform an action You want to specify, execute and queue requests at different times.
Just to quickly start you need a command object, An interface will keep it easy going in this case, thus providing you with the option of extending other classes e.</description></item><item><title>Implementing the adapter</title><link>https://shaaf.dev/post/2008-10-29-implementing-the-adapter/</link><pubDate>Wed, 29 Oct 2008 20:47:56 +0100</pubDate><guid>https://shaaf.dev/post/2008-10-29-implementing-the-adapter/</guid><description>Typically when implementing an interface you would have to implement all the methods that exist in that interface. A very good example is the MouseListener in the java Swing. When you need to implement more then one method where as typically you might be catching only one of them. Saying that you would also find a Mouse Adapter provided as well. Some of us use that often. And that is part of the Adapter pattern.</description></item><item><title>Abstract Factory pattern</title><link>https://shaaf.dev/post/2008-10-10-abstract-factory-pattern/</link><pubDate>Fri, 10 Oct 2008 10:20:10 +0200</pubDate><guid>https://shaaf.dev/post/2008-10-10-abstract-factory-pattern/</guid><description>Factories have been a key pattern in building applications, its fascinatingly simple, effective and to the point. When starting to learn a design oriented approach to applications or API, I would always recommend a factory pattern as one of the key starting notes of highlight in your design.
So today I am talking about the Abstract Factory pattern. Its not an &amp;ldquo;abstract&amp;rdquo; class or object that you call a pattern. But its a Factory of facotries and that is what exactly makes it so much wordingly abstract.</description></item><item><title>Crocus - CSV Reader</title><link>https://shaaf.dev/post/2008-10-03-crocus-csv-reader/</link><pubDate>Fri, 03 Oct 2008 23:38:42 +0200</pubDate><guid>https://shaaf.dev/post/2008-10-03-crocus-csv-reader/</guid><description>Easy to use ready to go CSV File Reading utility. Read One or Multiple files into a RecordManager, quick access to the file with segmentation into Fields and Records. Merge Multiple CSV files in one. Listener to CSV Files.
Download Here
Organization: A CSV file is broken up as follows A CSVField has a group of characters A CSVRecord has a group of CSVFields A CSVFile has a group of record</description></item><item><title>Quick start Singleton - Walk through</title><link>https://shaaf.dev/post/2008-06-23-quick-start-singleton-walk-through/</link><pubDate>Mon, 23 Jun 2008 03:56:37 +0200</pubDate><guid>https://shaaf.dev/post/2008-06-23-quick-start-singleton-walk-through/</guid><description>This being my first existence on the network and I just want to make sure that I would come back to this blog page again sometime and keep on writing. For now this is a quick 5 min walk through of getting your hands dirty on the Singleton Pattern. As any ones first pattern Singleton always seems to be the easiest to adapt and ironically always the mistress of your pains; when you realize the act wasn&amp;rsquo;t right in the first place.</description></item></channel></rss>